version: '3.8'

services:
  # Frontend de Gestión de Clientes
  customer-frontend:
    build:
      context: ./customer-frontend
      dockerfile: Dockerfile
    ports:
      - "3002:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://api:3000
      - NEXT_PUBLIC_WHATSAPP_SERVICE_URL=http://whatsapp-service:3001
    depends_on:
      - api
      - whatsapp-service

  # Microservicio de WhatsApp
  whatsapp-service:
    build:
      context: ./whatsapp-service
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/whatsapp_db
      - REDIS_URL=redis://redis:6379
      - API_URL=http://api:3000
      - FRONTEND_URL=http://customer-frontend:3000
    depends_on:
      - postgres
      - redis
      - api

  # Tu Backend API existente
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/restaurant_db
    depends_on:
      - postgres

  # Base de datos compartida
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"

  # Redis para colas y caché
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"

  # Nginx como reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - customer-frontend
      - whatsapp-service
      - api

volumes:
  postgres_data:
  redis_data: