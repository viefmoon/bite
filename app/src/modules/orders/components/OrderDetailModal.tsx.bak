import React, { useMemo } from 'react';
import { View, StyleSheet, ScrollView, ActivityIndicator } from 'react-native';
import {
  Modal,
  Portal,
  Text,
  IconButton,
  Divider,
  Card,
  Chip,
  Surface,
  DataTable,
} from 'react-native-paper';
import { format } from 'date-fns';
import { es } from 'date-fns/locale';
import { useAppTheme } from '@/app/styles/theme';
import { OrderStatusEnum } from '../types/orders.types';
import Icon from 'react-native-vector-icons/MaterialCommunityIcons';

interface OrderDetailModalProps {
  visible: boolean;
  onDismiss: () => void;
  orderId: string | null;
  orderNumber?: number;
  orderData?: any; // Datos de la orden pasados como prop
}

const getStatusColor = (status: string, theme: any) => {
  switch (status) {
    case OrderStatusEnum.PENDING:
      return '#FFA000';
    case OrderStatusEnum.IN_PROGRESS:
      return theme.colors.primary;
    case OrderStatusEnum.IN_PREPARATION:
      return '#FF6B35';
    case OrderStatusEnum.READY:
      return '#4CAF50';
    case OrderStatusEnum.DELIVERED:
      return theme.colors.tertiary;
    case OrderStatusEnum.COMPLETED:
      return '#9E9E9E';
    case OrderStatusEnum.CANCELLED:
      return theme.colors.error;
    default:
      return theme.colors.onSurfaceVariant;
  }
};

const getStatusLabel = (status: string) => {
  const statusMap: Record<string, string> = {
    [OrderStatusEnum.PENDING]: 'Pendiente',
    [OrderStatusEnum.IN_PROGRESS]: 'En Progreso',
    [OrderStatusEnum.IN_PREPARATION]: 'En Preparación',
    [OrderStatusEnum.READY]: 'Lista',
    [OrderStatusEnum.DELIVERED]: 'Entregada',
    [OrderStatusEnum.COMPLETED]: 'Completada',
    [OrderStatusEnum.CANCELLED]: 'Cancelada',
  };
  return statusMap[status] || status;
};

const getPreparationStatusLabel = (status: string) => {
  const statusMap: Record<string, string> = {
    PENDING: 'Pendiente',
    IN_PROGRESS: 'En Preparación',
    READY: 'Listo',
    DELIVERED: 'Entregado',
    CANCELLED: 'Cancelado',
  };
  return statusMap[status] || status;
};

const getPreparationStatusColor = (status: string, theme: any) => {
  switch (status) {
    case 'PENDING':
      return theme.colors.error;
    case 'IN_PROGRESS':
      return '#FFA000';
    case 'READY':
      return '#4CAF50';
    case 'DELIVERED':
      return theme.colors.tertiary;
    case 'CANCELLED':
      return theme.colors.onSurfaceDisabled;
    default:
      return theme.colors.onSurfaceVariant;
  }
};

// Componente interno para mostrar el contenido de detalles
export const OrderDetailContent: React.FC<{
  orderId: string | null;
  orderNumber?: number;
  orderData?: any; // Datos de la orden pasados como prop
}> = ({ orderId, orderNumber, orderData }) => {
  const theme = useAppTheme();
  const styles = useMemo(() => createStyles(theme), [theme]);

  // Si se pasan los datos de la orden, usarlos directamente
  const order = orderData;

  return (
    <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
      {!order ? (
        <View style={styles.errorContainer}>
          <Icon
            name="alert-circle-outline"
            size={48}
            color={theme.colors.error}
          />
          <Text style={styles.errorText}>No hay datos de la orden disponibles</Text>
        </View>
      ) : (
        <>
          {/* Información General */}
          <Card style={styles.infoCard}>
            <Card.Content>
              <Text style={styles.sectionTitle}>Información General</Text>
              <View style={styles.infoRow}>
                <Text style={styles.infoLabel}>Creada:</Text>
                <Text style={styles.infoValue}>
                  {format(
                    new Date(order.createdAt),
                    "dd/MM/yyyy 'a las' HH:mm",
                    { locale: es },
                  )}
                </Text>
              </View>
              {order.updatedAt && order.updatedAt !== order.createdAt && (
                <View style={styles.infoRow}>
                  <Text style={styles.infoLabel}>Última actualización:</Text>
                  <Text style={styles.infoValue}>
                    {format(
                      new Date(order.updatedAt),
                      "dd/MM/yyyy 'a las' HH:mm",
                      { locale: es },
                    )}
                  </Text>
                </View>
              )}
              <View style={styles.infoRow}>
                <Text style={styles.infoLabel}>Total:</Text>
                <Text style={[styles.infoValue, styles.totalAmount]}>
                  ${Number(order.total || 0).toFixed(2)}
                </Text>
              </View>
            </Card.Content>
          </Card>

          {/* Items de la Orden */}
          <Card style={styles.itemsCard}>
            <Card.Content>
              <Text style={styles.sectionTitle}>
                Artículos ({order.orderItems?.length || 0})
              </Text>

              <DataTable>
                <DataTable.Header>
                  <DataTable.Title style={styles.itemNameColumn}>
                    Artículo
                  </DataTable.Title>
                  <DataTable.Title>Estado</DataTable.Title>
                  <DataTable.Title>Preparado</DataTable.Title>
                </DataTable.Header>

                {order.orderItems?.map((item: any, index: number) => (
                  <DataTable.Row key={item.id || index}>
                    <DataTable.Cell style={styles.itemNameColumn}>
                      <View>
                        <Text style={styles.itemName}>
                          {item.product?.name || 'Producto desconocido'}
                        </Text>
                        {item.productVariant && (
                          <Text style={styles.itemVariant}>
                            {item.productVariant.name}
                          </Text>
                        )}
                        {item.preparationNotes && (
                          <Text style={styles.itemNotes}>
                            📝 {item.preparationNotes}
                          </Text>
                        )}
                      </View>
                    </DataTable.Cell>
                    <DataTable.Cell>
                      <Chip
                        mode="flat"
                        compact
                        style={[
                          styles.preparationChip,
                          {
                            backgroundColor:
                              getPreparationStatusColor(
                                item.preparationStatus,
                                theme,
                              ) + '20',
                          },
                        ]}
                        textStyle={[
                          styles.preparationChipText,
                          {
                            color: getPreparationStatusColor(
                              item.preparationStatus,
                              theme,
                            ),
                          },
                        ]}
                      >
                        {getPreparationStatusLabel(item.preparationStatus)}
                      </Chip>
                    </DataTable.Cell>
                    <DataTable.Cell>
                      {item.preparedAt ? (
                        <Text style={styles.preparedTime}>
                          {format(new Date(item.preparedAt), 'HH:mm', {
                            locale: es,
                          })}
                        </Text>
                      ) : (
                        <Text style={styles.notPrepared}>-</Text>
                      )}
                    </DataTable.Cell>
                  </DataTable.Row>
                ))}
              </DataTable>
            </Card.Content>
          </Card>

          {/* Tiempos de Preparación */}
          {order.orderItems?.some((item: any) => item.preparedAt) && (
            <Card style={styles.timesCard}>
              <Card.Content>
                <Text style={styles.sectionTitle}>Tiempos de Preparación</Text>
                {order.orderItems
                  ?.filter((item: any) => item.preparedAt)
                  .map((item: any, index: number) => {
                    const createdTime = new Date(order.createdAt).getTime();
                    const preparedTime = new Date(item.preparedAt).getTime();
                    const timeDiff = preparedTime - createdTime;
                    const minutes = Math.floor(timeDiff / 60000);
                    const seconds = Math.floor((timeDiff % 60000) / 1000);

                    return (
                      <View key={item.id || index} style={styles.timeRow}>
                        <Text style={styles.timeItemName}>
                          {item.product?.name || 'Producto'}
                          {item.productVariant
                            ? ` - ${item.productVariant.name}`
                            : ''}
                        </Text>
                        <Text style={styles.timeValue}>
                          {minutes > 0
                            ? `${minutes}m ${seconds}s`
                            : `${seconds}s`}
                        </Text>
                      </View>
                    );
                  })}
              </Card.Content>
            </Card>
          )}
        </>
      )}
    </ScrollView>
  );
};

export const OrderDetailModal: React.FC<OrderDetailModalProps> = ({
  visible,
  onDismiss,
  orderId,
  orderNumber,
  orderData,
}) => {
  const theme = useAppTheme();
  const styles = useMemo(() => createStyles(theme), [theme]);

  // Usar los datos pasados como prop
  const order = orderData;

  if (!visible) return null;

  return (
    <Portal>
      <Modal
        visible={visible}
        onDismiss={onDismiss}
        contentContainerStyle={styles.modalContainer}
      >
        <Surface style={styles.surface} elevation={2}>
          {/* Header */}
          <View style={styles.header}>
            <View style={styles.headerContent}>
              <Text style={styles.title}>
                {orderNumber ? `Orden #${orderNumber}` : 'Detalles de la Orden'}
              </Text>
              {order && (
                <Chip
                  mode="flat"
                  style={[
                    styles.statusChip,
                    {
                      backgroundColor: getStatusColor(order.orderStatus, theme),
                    },
                  ]}
                  textStyle={styles.statusChipText}
                >
                  {getStatusLabel(order.orderStatus)}
                </Chip>
              )}
            </View>
            <IconButton
              icon="close"
              size={24}
              onPress={onDismiss}
              style={styles.closeButton}
            />
          </View>

          <Divider />

          {/* Content */}
          <OrderDetailContent
            orderId={orderId}
            orderNumber={orderNumber}
            orderData={order}
          />
                    <View style={styles.infoRow}>
                      <Text style={styles.infoLabel}>Creada:</Text>
                      <Text style={styles.infoValue}>
                        {format(
                          new Date(order.createdAt),
                          "dd/MM/yyyy 'a las' HH:mm",
                          { locale: es },
                        )}
                      </Text>
                    </View>
                    {order.updatedAt && order.updatedAt !== order.createdAt && (
                      <View style={styles.infoRow}>
                        <Text style={styles.infoLabel}>
                          Última actualización:
                        </Text>
                        <Text style={styles.infoValue}>
                          {format(
                            new Date(order.updatedAt),
                            "dd/MM/yyyy 'a las' HH:mm",
                            { locale: es },
                          )}
                        </Text>
                      </View>
                    )}
                    <View style={styles.infoRow}>
                      <Text style={styles.infoLabel}>Total:</Text>
                      <Text style={[styles.infoValue, styles.totalAmount]}>
                        ${Number(order.total || 0).toFixed(2)}
                      </Text>
                    </View>
                  </Card.Content>
                </Card>

                {/* Items de la Orden */}
                <Card style={styles.itemsCard}>
                  <Card.Content>
                    <Text style={styles.sectionTitle}>
                      Artículos ({order.orderItems?.length || 0})
                    </Text>

                    <DataTable>
                      <DataTable.Header>
                        <DataTable.Title style={styles.itemNameColumn}>
                          Artículo
                        </DataTable.Title>
                        <DataTable.Title>Estado</DataTable.Title>
                        <DataTable.Title>Preparado</DataTable.Title>
                      </DataTable.Header>

                      {order.orderItems?.map((item: any, index: number) => (
                        <DataTable.Row key={item.id || index}>
                          <DataTable.Cell style={styles.itemNameColumn}>
                            <View>
                              <Text style={styles.itemName}>
                                {item.product?.name || 'Producto desconocido'}
                              </Text>
                              {item.productVariant && (
                                <Text style={styles.itemVariant}>
                                  {item.productVariant.name}
                                </Text>
                              )}
                              {item.preparationNotes && (
                                <Text style={styles.itemNotes}>
                                  📝 {item.preparationNotes}
                                </Text>
                              )}
                            </View>
                          </DataTable.Cell>
                          <DataTable.Cell>
                            <Chip
                              mode="flat"
                              compact
                              style={[
                                styles.preparationChip,
                                {
                                  backgroundColor:
                                    getPreparationStatusColor(
                                      item.preparationStatus,
                                      theme,
                                    ) + '20',
                                },
                              ]}
                              textStyle={[
                                styles.preparationChipText,
                                {
                                  color: getPreparationStatusColor(
                                    item.preparationStatus,
                                    theme,
                                  ),
                                },
                              ]}
                            >
                              {getPreparationStatusLabel(
                                item.preparationStatus,
                              )}
                            </Chip>
                          </DataTable.Cell>
                          <DataTable.Cell>
                            {item.preparedAt ? (
                              <Text style={styles.preparedTime}>
                                {format(new Date(item.preparedAt), 'HH:mm', {
                                  locale: es,
                                })}
                              </Text>
                            ) : (
                              <Text style={styles.notPrepared}>-</Text>
                            )}
                          </DataTable.Cell>
                        </DataTable.Row>
                      ))}
                    </DataTable>
                  </Card.Content>
                </Card>

                {/* Tiempos de Preparación */}
                {order.orderItems?.some((item: any) => item.preparedAt) && (
                  <Card style={styles.timesCard}>
                    <Card.Content>
                      <Text style={styles.sectionTitle}>
                        Tiempos de Preparación
                      </Text>
                      {order.orderItems
                        ?.filter((item: any) => item.preparedAt)
                        .map((item: any, index: number) => {
                          const createdTime = new Date(
                            order.createdAt,
                          ).getTime();
                          const preparedTime = new Date(
                            item.preparedAt,
                          ).getTime();
                          const timeDiff = preparedTime - createdTime;
                          const minutes = Math.floor(timeDiff / 60000);
                          const seconds = Math.floor((timeDiff % 60000) / 1000);

                          return (
                            <View key={item.id || index} style={styles.timeRow}>
                              <Text style={styles.timeItemName}>
                                {item.product?.name || 'Producto'}
                                {item.productVariant
                                  ? ` - ${item.productVariant.name}`
                                  : ''}
                              </Text>
                              <Text style={styles.timeValue}>
                                {minutes > 0
                                  ? `${minutes}m ${seconds}s`
                                  : `${seconds}s`}
                              </Text>
                            </View>
                          );
                        })}
                    </Card.Content>
                  </Card>
                )}
              </>
            )}
        </Surface>
      </Modal>
    </Portal>
  );
};

const createStyles = (theme: any) =>
  StyleSheet.create({
    modalContainer: {
      padding: 20,
      maxWidth: 600,
      width: '90%',
      alignSelf: 'center',
      maxHeight: '90%',
    },
    surface: {
      borderRadius: theme.roundness * 2,
      overflow: 'hidden',
    },
    header: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-between',
      paddingHorizontal: 16,
      paddingVertical: 8,
      minHeight: 56,
    },
    headerContent: {
      flex: 1,
      flexDirection: 'row',
      alignItems: 'center',
      gap: 12,
    },
    title: {
      fontSize: 20,
      fontWeight: '600',
      color: theme.colors.onSurface,
    },
    statusChip: {
      height: 28,
    },
    statusChipText: {
      fontSize: 12,
      fontWeight: '600',
      color: 'white',
    },
    closeButton: {
      margin: 0,
    },
    content: {
      maxHeight: 600,
    },
    loadingContainer: {
      padding: 40,
      alignItems: 'center',
    },
    loadingText: {
      marginTop: 16,
      color: theme.colors.onSurfaceVariant,
    },
    errorContainer: {
      padding: 40,
      alignItems: 'center',
    },
    errorText: {
      marginTop: 16,
      color: theme.colors.error,
    },
    infoCard: {
      margin: 16,
      marginBottom: 8,
    },
    itemsCard: {
      margin: 16,
      marginTop: 8,
      marginBottom: 8,
    },
    timesCard: {
      margin: 16,
      marginTop: 8,
      marginBottom: 16,
    },
    sectionTitle: {
      fontSize: 16,
      fontWeight: '600',
      color: theme.colors.onSurface,
      marginBottom: 12,
    },
    infoRow: {
      flexDirection: 'row',
      justifyContent: 'space-between',
      marginBottom: 8,
    },
    infoLabel: {
      color: theme.colors.onSurfaceVariant,
    },
    infoValue: {
      color: theme.colors.onSurface,
      fontWeight: '500',
    },
    totalAmount: {
      fontSize: 18,
      color: theme.colors.primary,
    },
    itemNameColumn: {
      flex: 2,
    },
    itemName: {
      fontWeight: '500',
      color: theme.colors.onSurface,
    },
    itemVariant: {
      fontSize: 12,
      color: theme.colors.onSurfaceVariant,
    },
    itemNotes: {
      fontSize: 12,
      color: theme.colors.onSurfaceVariant,
      fontStyle: 'italic',
      marginTop: 2,
    },
    preparationChip: {
      height: 24,
    },
    preparationChipText: {
      fontSize: 11,
      fontWeight: '600',
    },
    preparedTime: {
      fontSize: 12,
      color: theme.colors.onSurface,
    },
    notPrepared: {
      fontSize: 12,
      color: theme.colors.onSurfaceDisabled,
    },
    timeRow: {
      flexDirection: 'row',
      justifyContent: 'space-between',
      paddingVertical: 8,
      borderBottomWidth: 1,
      borderBottomColor: theme.colors.outlineVariant,
    },
    timeItemName: {
      flex: 1,
      color: theme.colors.onSurface,
      paddingRight: 8,
    },
    timeValue: {
      color: theme.colors.primary,
      fontWeight: '600',
    },
  });

export default OrderDetailModal;
